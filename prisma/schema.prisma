// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Criando a tabela
model Product {
  id           String        @id @default(uuid()) // o @id vai criar o id como uma chave primária e o @default vai determinar um valor padrão para o campo caso o usuário não informe nada
  name         String
  price        Decimal       @db.Decimal(10, 2) // Permite customizar o tipo exato usado no banco (bem útil com Postgres). Vai gerar um campo DECIMAL(10,2) no Postgres. Aceitando até 10 casas antes da virgula e 2 após a virgula
  stock        Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt // Usado em campos DateTime. O Prisma atualiza automaticamente esse campo sempre que a linha for modificada.
  saleProducts SaleProduct[]
}

model Sale {
  id        String        @id @default(uuid())
  date      DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  products  SaleProduct[]
}
model SaleProduct {
  id        String   @id @default(uuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id]) // aqui a gente coloca as relações
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  unitPrice Decimal  @db.Decimal(10, 2)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
